import socket  # นำเข้าโมดูล socket เพื่อใช้ในการสร้างและจัดการการเชื่อมต่อเครือข่าย
import threading  # นำเข้าโมดูล threading เพื่อใช้ในการจัดการ thread หลายๆ thread
import json  # นำเข้าโมดูล json เพื่อใช้ในการแปลงข้อมูลเป็น JSON และจาก JSON
import sys  # นำเข้าโมดูล sys เพื่อใช้ในการเข้าถึงพารามิเตอร์และฟังก์ชันที่เกี่ยวข้องกับระบบ
import os  # นำเข้าโมดูล os เพื่อใช้ในการจัดการระบบไฟล์
import secrets  # นำเข้าโมดูล secrets เพื่อใช้ในการสร้างข้อมูลที่สุ่มและปลอดภัย (ใช้สำหรับสร้าง wallet address)

class Node:  # สร้างคลาส Node เพื่อเป็นตัวแทนของโหนดในเครือข่าย
    def __init__(self, host, port):  # ฟังก์ชันเริ่มต้นของคลาส Node ที่รับ host และ port เป็นพารามิเตอร์
        self.host = host  # กำหนด host ของโหนด
        self.port = port  # กำหนด port ของโหนด
        self.peers = []  # สร้างรายการว่างเพื่อเก็บ socket ของ peer ที่เชื่อมต่อ
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # สร้าง socket แบบ TCP/IP
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # ตั้งค่า socket ให้สามารถใช้งานที่อยู่เดิมได้ทันทีหลังจากปิดไป
        self.transactions = []  # สร้างรายการว่างเพื่อเก็บ transactions
        self.transaction_file = f"transactions_{port}.json"  # กำหนดชื่อไฟล์สำหรับบันทึก transactions โดยใช้ port ในชื่อไฟล์
        self.wallet_address = self.generate_wallet_address()  # สร้าง wallet address สำหรับโหนดนี้

    def generate_wallet_address(self):  # ฟังก์ชันสำหรับสร้าง wallet address แบบง่ายๆ
        return '0x' + secrets.token_hex(20)  # สร้างที่อยู่แบบ hex ยาว 40 ตัวอักษร (20 ไบต์) และเพิ่ม '0x' ด้านหน้า

    def start(self):  # ฟังก์ชันเริ่มต้นการทำงานของโหนด
        self.socket.bind((self.host, self.port))  # ผูก socket กับที่อยู่ (host และ port)
        self.socket.listen(1)  # ตั้งค่า socket ให้รอรับการเชื่อมต่อเข้ามา (listen)
        print(f"Node listening on {self.host}:{self.port}")  # พิมพ์ข้อความแจ้งว่าโหนดกำลังรอรับการเชื่อมต่อที่ host และ port นี้
        print(f"Your wallet address is: {self.wallet_address}")  # พิมพ์ที่อยู่ wallet ของโหนดนี้

        self.load_transactions()  # โหลด transactions จากไฟล์ (ถ้ามี)

        # เริ่ม thread สำหรับรับการเชื่อมต่อใหม่
        accept_thread = threading.Thread(target=self.accept_connections)  # สร้าง thread สำหรับรับการเชื่อมต่อใหม่
        accept_thread.start()  # เริ่มต้น thread

    def accept_connections(self):  # ฟังก์ชันสำหรับรับการเชื่อมต่อใหม่
        while True:
            client_socket, address = self.socket.accept()  # รอรับการเชื่อมต่อใหม่
            print(f"New connection from {address}")  # พิมพ์ข้อความแจ้งว่ามีการเชื่อมต่อใหม่จากที่อยู่ address

            client_thread = threading.Thread(target=self.handle_client, args=(client_socket,))  # สร้าง thread ใหม่สำหรับจัดการการเชื่อมต่อนี้
            client_thread.start()  # เริ่มต้น thread

    def handle_client(self, client_socket):  # ฟังก์ชันสำหรับจัดการ client ที่เชื่อมต่อ
        while True:
            try:
                data = client_socket.recv(1024)  # รับข้อมูลจาก client (สูงสุด 1024 ไบต์)
                if not data:  # ถ้าไม่มีข้อมูลที่ได้รับ (การเชื่อมต่อถูกปิด)
                    break
                message = json.loads(data.decode('utf-8'))  # แปลงข้อมูลที่ได้รับจาก JSON string เป็น Python object

                self.process_message(message, client_socket)  # ประมวลผลข้อความที่ได้รับ

            except Exception as e:  # ถ้ามีข้อผิดพลาดเกิดขึ้น
                print(f"Error handling client: {e}")  # พิมพ์ข้อความข้อผิดพลาด
                break

        client_socket.close()  # ปิดการเชื่อมต่อกับ client

    def connect_to_peer(self, peer_host, peer_port):  # ฟังก์ชันสำหรับเชื่อมต่อไปยัง peer อื่น
        try:
            peer_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # สร้าง socket แบบ TCP/IP สำหรับเชื่อมต่อกับ peer
            peer_socket.connect((peer_host, peer_port))  # เชื่อมต่อไปยัง peer
            self.peers.append(peer_socket)  # เพิ่ม socket ของ peer เข้าไปในรายการ peers
            print(f"Connected to peer {peer_host}:{peer_port}")  # พิมพ์ข้อความแจ้งว่าการเชื่อมต่อสำเร็จ

            self.request_sync(peer_socket)  # ขอข้อมูล transactions ทั้งหมดจาก peer ที่เชื่อมต่อ

            peer_thread = threading.Thread(target=self.handle_client, args=(peer_socket,))  # สร้าง thread สำหรับรับข้อมูลจาก peer นี้
            peer_thread.start()  # เริ่มต้น thread

        except Exception as e:  # ถ้ามีข้อผิดพลาดเกิดขึ้น
            print(f"Error connecting to peer: {e}")  # พิมพ์ข้อความข้อผิดพลาด

    def broadcast(self, message):  # ฟังก์ชันสำหรับส่งข้อมูลไปยังทุก peer ที่เชื่อมต่ออยู่
        for peer_socket in self.peers:  # วนลูปผ่านทุก peer ที่เชื่อมต่ออยู่
            try:
                peer_socket.send(json.dumps(message).encode('utf-8'))  # ส่งข้อมูลที่แปลงเป็น JSON string และเข้ารหัสเป็น utf-8
            except Exception as e:  # ถ้ามีข้อผิดพลาดเกิดขึ้น
                print(f"Error broadcasting to peer: {e}")  # พิมพ์ข้อความข้อผิดพลาด
                self.peers.remove(peer_socket)  # ลบ peer ที่เกิดข้อผิดพลาดออกจากรายการ peers

    def process_message(self, message, client_socket):  # ฟังก์ชันสำหรับประมวลผลข้อความที่ได้รับ
        if message['type'] == 'transaction':  # ถ้าข้อความเป็นประเภท transaction
            print(f"Received transaction: {message['data']}")  # พิมพ์ข้อมูล transaction ที่ได้รับ
            self.add_transaction(message['data'])  # เพิ่ม transaction ใหม่
        elif message['type'] == 'sync_request':  # ถ้าข้อความเป็นประเภท sync_request
            self.send_all_transactions(client_socket)  # ส่ง transactions ทั้งหมดไปยังโหนดที่ขอซิงโครไนซ์
        elif message['type'] == 'sync_response':  # ถ้าข้อความเป็นประเภท sync_response
            self.receive_sync_data(message['data'])  # รับและประมวลผลข้อมูล transactions ที่ได้รับจากการซิงโครไนซ์
        else:
            print(f"Received message: {message}")  # พิมพ์ข้อความที่ได้รับ (กรณีข้อความเป็นประเภทอื่นๆ)

    def add_transaction(self, transaction):  # ฟังก์ชันสำหรับเพิ่ม transaction ใหม่
        if transaction not in self.transactions:  # ถ้า transaction ยังไม่มีอยู่ในรายการ
            self.transactions.append(transaction)  # เพิ่ม transaction เข้าไปในรายการ
            self.save_transactions()  # บันทึก transactions ลงไฟล์
            print(f"Transaction added and saved: {transaction}")  # พิมพ์ข้อความแจ้งว่า transaction ถูกเพิ่มและบันทึกแล้ว

    def create_transaction(self, recipient, amount):  # ฟังก์ชันสำหรับสร้าง transaction ใหม่
        transaction = {  # สร้าง transaction ใหม่
            'sender': self.wallet_address,  # ที่อยู่ของผู้ส่งคือที่อยู่ของโหนดนี้
            'recipient': recipient,  # ที่อยู่ของผู้รับ
            'amount': amount  # จำนวนเงิน
        }
        self.add_transaction(transaction)  # เพิ่ม transaction ใหม่
        self.broadcast({'type': 'transaction', 'data': transaction})  # ส่ง transaction ไปยังทุก peer ที่เชื่อมต่ออยู่

    def save_transactions(self):  # ฟังก์ชันสำหรับบันทึก transactions ลงไฟล์
        with open(self.transaction_file, 'w') as f:  # เปิดไฟล์เพื่อเขียน (เขียนทับถ้ามีอยู่แล้ว)
            json.dump(self.transactions, f)  # เขียนรายการ transactions ลงในไฟล์ในรูปแบบ JSON

    def load_transactions(self):  # ฟังก์ชันสำหรับโหลด transactions จากไฟล์ (ถ้ามี)
        if os.path.exists(self.transaction_file):  # ถ้าไฟล์ transactions มีอยู่
            with open(self.transaction_file, 'r') as f:  # เปิดไฟล์เพื่ออ่าน
                self.transactions = json.load(f)  # โหลดรายการ transactions จากไฟล์
            print(f"Loaded {len(self.transactions)} transactions from file.")  # พิมพ์ข้อความแจ้งว่ามี transactions ที่ถูกโหลดขึ้นมา

    def request_sync(self, peer_socket):  # ฟังก์ชันสำหรับส่งคำขอซิงโครไนซ์ไปยัง peer
        sync_request = json.dumps({"type": "sync_request"}).encode('utf-8')  # สร้างข้อความคำขอซิงโครไนซ์และเข้ารหัสเป็น utf-8
        peer_socket.send(sync_request)  # ส่งข้อความคำขอซิงโครไนซ์ไปยัง peer

    def send_all_transactions(self, client_socket):  # ฟังก์ชันสำหรับส่ง transactions ทั้งหมดไปยังโหนดที่ขอซิงโครไนซ์
        sync_data = json.dumps({"type": "sync_response", "data": self.transactions}).encode('utf-8')  # สร้างข้อความตอบกลับและเข้ารหัสเป็น utf-8
        client_socket.send(sync_data)  # ส่งข้อความตอบกลับไปยังโหนดที่ขอซิงโครไนซ์

    def receive_sync_data(self, sync_transactions):  # ฟังก์ชันสำหรับรับและประมวลผลข้อมูล transactions ที่ได้รับจากการซิงโครไนซ์
        for tx in sync_transactions:  # วนลูปผ่านทุก transaction ที่ได้รับ
            self.add_transaction(tx)  # เพิ่ม transaction
        print(f"Synchronized {len(sync_transactions)} transactions.")  # พิมพ์ข้อความแจ้งว่าซิงโครไนซ์ transactions เสร็จสิ้นแล้ว

if __name__ == "__main__":  # ส่วนหลักของโปรแกรม
    if len(sys.argv) != 2:  # ถ้าจำนวนพารามิเตอร์ไม่เท่ากับ 2 (ชื่อสคริปต์ + พารามิเตอร์ port)
        print("Usage: python script.py <port>")  # พิมพ์วิธีการใช้งานโปรแกรม
        sys.exit(1)  # ออกจากโปรแกรมพร้อมสถานะผิดพลาด

    port = int(sys.argv[1])  # รับค่า port จากพารามิเตอร์ที่สอง
    node = Node("0.0.0.0", port)  # สร้างโหนดใหม่โดยใช้ "0.0.0.0" เพื่อรับการเชื่อมต่อจากภายนอกและกำหนด port
    node.start()  # เริ่มต้นการทำงานของโหนด

    while True:  # วนลูปไม่รู้จบเพื่อรอรับคำสั่งจากผู้ใช้
        print("\n1. Connect to a peer")  # พิมพ์ตัวเลือกที่ 1
        print("2. Create a transaction")  # พิมพ์ตัวเลือกที่ 2
        print("3. View all transactions")  # พิมพ์ตัวเลือกที่ 3
        print("4. View my wallet address")  # พิมพ์ตัวเลือกที่ 4
        print("5. Exit")  # พิมพ์ตัวเลือกที่ 5
        choice = input("Enter your choice: ")  # รับตัวเลือกจากผู้ใช้

        if choice == '1':  # ถ้าผู้ใช้เลือก 1
            peer_host = input("Enter peer host to connect: ")  # รับค่า peer host จากผู้ใช้
            peer_port = int(input("Enter peer port to connect: "))  # รับค่า peer port จากผู้ใช้
            node.connect_to_peer(peer_host, peer_port)  # เชื่อมต่อไปยัง peer
        elif choice == '2':  # ถ้าผู้ใช้เลือก 2
            recipient = input("Enter recipient wallet address: ")  # รับค่าที่อยู่ wallet ของผู้รับจากผู้ใช้
            amount = float(input("Enter amount: "))  # รับจำนวนเงินจากผู้ใช้
            node.create_transaction(recipient, amount)  # สร้าง transaction ใหม่
        elif choice == '3':  # ถ้าผู้ใช้เลือก 3
            print("All transactions:")  # พิมพ์ข้อความ "All transactions:"
            for tx in node.transactions:  # วนลูปผ่านทุก transaction
                print(tx)  # พิมพ์ transaction
        elif choice == '4':  # ถ้าผู้ใช้เลือก 4
            print(f"Your wallet address is: {node.wallet_address}")  # พิมพ์ที่อยู่ wallet ของโหนดนี้
        elif choice == '5':  # ถ้าผู้ใช้เลือก 5
            break  # ออกจากลูป (จบโปรแกรม)
        else:
            print("Invalid choice. Please try again.")  # พิมพ์ข้อความแจ้งว่าตัวเลือกไม่ถูกต้องและให้ลองใหม่

    print("Exiting...")  # พิมพ์ข้อความ "Exiting..."
